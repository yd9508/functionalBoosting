dim(data)
data = read.csv("2021_11_3_IPEDS_data_college_IPEDS_paper.csv")
table(data$Special, data$HCType)
matrix = table(data$Special, data$HCType)
matrox
matrix
for(i in 1: 4):
sum = apply(matrix, sum)
help("apply")
sum = apply(matrix, 2, sum)
sum
sum = apply(matrix, 1, sum)
sum
aa = array(0, c(7, 4))
aaa
aa
aa = array(0, c(7, 4))
for(i in 1: 4){
for(j in 1:7){
aa[i,j] = matrix[i,j] / sum[i]
}
}
dim(matrix)
aa = array(0, c(7, 4))
for(i in 1: 7){
for(j in 1:4){
aa[i,j] = matrix[i,j] / sum[i]
}
}
aa
round(aa, 2)
sum
round(aa, 3)
matrix
round(aa, 3) *100
round(aa, 4) *100
data$Special_binary = ifelse( data$Special == "0", 0, 1)
table(data$Special_binary, data$HCType)
matrix1 = table(data$Special_binary, data$HCType)
sum = apply(matrix1, 1, sum)
sum
matrix1/sum
round(matrix1/sum, 2)
round(matrix1/sum, 3)
table(data$Special, data$HCType)
setwd("/Users/yuding/Desktop")
data = read.csv("rawdata.csv")
setwd("/Users/yuding/Desktop/data")
startind = 1
endind = startind
explabel = data[1, 1]
for(i in 1: length(data[,1])){
if(explabel != data[i,1]){
print(i)
print(explabel)
endind = i - 1
temp = list()
temp$label = explabel
temp$expx = data[startind : endind,2]
temp$expy = data[startind : endind,3]
temp$simx = data[startind : endind,4]
temp$simy = data[startind : endind,5]
temp$exexp = data[startind : endind,6]
temp$eyexp = data[startind : endind,7]
temp$exsim = data[startind : endind,8]
temp$eysim = data[startind : endind,9]
write.csv(temp, file = paste(explabel, ".csv" , sep = "", collapse = NULL))
startind = i
explabel = data[i,1]
}
}
set.seed(1111)
temp = list.files(pattern="*.csv")
temp
temp = sample(temp)
data = list2env(lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))), read.csv), envir = .GlobalEnv)
for(i in 1: length(temp)){
x = temp[i]
if(i <= 0.8 * length(temp)){
temp1 = read.csv(x)
write.csv(temp1, file =  paste0("train\\", x))
}else{
temp2 = read.csv(x)
write.csv(temp2, file = paste0("test\\", x))
}
}
length(temp)
set.seed(1111)
temp = list.files(pattern="*.csv")
temp = sample(temp)
set.seed(1111)
length(temp)
data = list2env(lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))), read.csv), envir = .GlobalEnv)
for(i in 1: length(temp)){
x = temp[i]
if(i <= 0.8 * length(temp)){
temp1 = read.csv(x)
write.csv(temp1, file =  paste0("train/", x))
}else{
temp2 = read.csv(x)
write.csv(temp2, file = paste0("test/", x))
}
}
for(i in 1: length(temp)){
x = temp[i]
if(i <= 0.8 * length(temp)){
temp1 = read.csv(x)
write.csv(temp1, file =  paste0("/Users/yuding/Desktop/data/train/", x))
}else{
temp2 = read.csv(x)
write.csv(temp2, file = paste0("/Users/yuding/Desktop/data/test/", x))
}
}
setwd("/Users/yuding/Desktop/data/test/")
temp = list.files(pattern="*.csv")
temp = sample(temp)
len = length(temp)
simx  = list()
simy = list()
expx = list()
expy = list()
exexp = list()
eyexp = list()
exsim = list()
eysim = list()
for(i in 1: len){
temp1 = read.csv(paste(temp[i]))
if(dim(temp1)[1] < 200){
cat(temp[i], dim(temp1), i)
next
}else{
expx = cbind(expx, temp1[1: 200, 4])
expy = cbind(expy, temp1[1: 200, 5])
simx = cbind(simx, temp1[1: 200, 6])
simy = cbind(simy, temp1[1: 200, 7])
exexp = cbind(exexp, temp1[1: 200, 8])
eyexp = cbind(eyexp, temp1[1: 200, 9])
exsim = cbind(exsim, temp1[1: 200, 10])
eysim = cbind(eysim, temp1[1: 200, 11])
}
}
dim(expx)
dim(expy)
dim(simx)
dim(simy)
dim(exexp)
dim(eyexp)
dim(exsim)
dim(eysim)
write.table(expx, file = "/Users/yuding/Desktop/expx_test.csv",sep="," , row.names = F, col.names=F)
write.table(expy, file = "/Users/yuding/Desktop/expy_test.csv",sep="," , row.names = F, col.names=F)
write.table(simx, file = "/Users/yuding/Desktop/simx_test.csv",sep="," , row.names = F, col.names=F)
write.table(simy, file = "/Users/yuding/Desktop/simy_test.csv",sep="," , row.names = F, col.names=F)
write.table(exexp, file = "/Users/yuding/Desktop/exexp_test.csv",sep="," , row.names = F, col.names=F)
write.table(eyexp, file = "/Users/yuding/Desktop/eyexp_test.csv",sep="," , row.names = F, col.names=F)
write.table(exsim, file = "/Users/yuding/Desktop/exsim_test.csv",sep="," , row.names = F, col.names=F)
write.table(eysim, file = "/Users/yuding/Desktop/eysim_test.csv",sep="," , row.names = F, col.names=F)
setwd("/Users/yuding/Desktop/train")
temp = list.files(pattern="*.csv")
temp = sample(temp)
len = length(temp)
simx  = list()
simy = list()
expx = list()
setwd("/Users/yuding/Desktop/data/train")
temp = list.files(pattern="*.csv")
temp = sample(temp)
len = length(temp)
simx  = list()
simy = list()
expx = list()
expy = list()
exexp = list()
eyexp = list()
exsim = list()
eysim = list()
for(i in 1: len){
temp1 = read.csv(paste(temp[i]))
if(dim(temp1)[1] < 200){
cat(temp[i], dim(temp1), i)
next
}else{
expx = cbind(expx, temp1[1: 200, 4])
expy = cbind(expy, temp1[1: 200, 5])
simx = cbind(simx, temp1[1: 200, 6])
simy = cbind(simy, temp1[1: 200, 7])
exexp = cbind(exexp, temp1[1: 200, 8])
eyexp = cbind(eyexp, temp1[1: 200, 9])
exsim = cbind(exsim, temp1[1: 200, 10])
eysim = cbind(eysim, temp1[1: 200, 11])
}
}
dim(expx)
dim(expy)
dim(simx)
dim(simy)
dim(exexp)
dim(eyexp)
write.table(expx, file = "/Users/yuding/Desktop/expx_train.csv",sep="," , row.names = F, col.names=F)
write.table(expy, file = "/Users/yuding/Desktop/expy_train.csv",sep="," , row.names = F, col.names=F)
write.table(simx, file = "/Users/yuding/Desktop/simx_train.csv",sep="," , row.names = F, col.names=F)
write.table(simy, file = "/Users/yuding/Desktop/simy_train.csv",sep="," , row.names = F, col.names=F)
write.table(exexp, file = "/Users/yuding/Desktop/exexp_train.csv",sep="," , row.names = F, col.names=F)
write.table(eyexp, file = "/Users/yuding/Desktop/eyexp_train.csv",sep="," , row.names = F, col.names=F)
write.table(exsim, file = "/Users/yuding/Desktop/exsim_train.csv",sep="," , row.names = F, col.names=F)
write.table(eysim, file = "/Users/yuding/Desktop/eysim_train.csv",sep="," , row.names = F, col.names=F)
simx_test = read.csv("simx_train.csv", header = FALSE)
setwd("/Users/yuding/Desktop")
simx_test = read.csv("simx_train.csv", header = FALSE)
simx_test = read.csv("simx_train.csv", header = FALSE)
simy_test = read.csv("simy_train.csv", header = FALSE)
expx_test = read.csv("expx_train.csv", header = FALSE)
expy_test = read.csv("expx_train.csv", header = FALSE)
View(simx_test)
day.5
seq(1, 200, 200)
seq(1, 200, 1)
basis = create.bspline.basis(c(0, 200), 20)
simx_test = read.csv("simx_train.csv", header = FALSE)
simy_test = read.csv("simy_train.csv", header = FALSE)
expx_test = read.csv("expx_train.csv", header = FALSE)
expy_test = read.csv("expx_train.csv", header = FALSE)
simx_test_fd = smooth.basis(seq(1, 200, 1), simx_test, basis)$fd
simy_test_fd = smooth.basis(seq(1, 200, 1), simy_test, basis)$fd
expx_test_fd = smooth.basis(seq(1, 200, 1), expx_test, basis)$fd
expy_test_fd = smooth.basis(seq(1, 200, 1), expy_test, basis)$fd
simx_test
seq(1, 200, 1)
simx_test = as.numeric(simx_test)
simx_test = as.matrix(simx_test)
simx_test_fd = smooth.basis(seq(1, 200, 1), simx_test, basis)$fd
simx_test = as.matrix(read.csv("simx_train.csv", header = FALSE))
simy_test = as.matrix(read.csv("simy_train.csv", header = FALSE))
expx_test = as.matrix(read.csv("expx_train.csv", header = FALSE))
expy_test = as.matrix(read.csv("expy_train.csv", header = FALSE))
simx_test_fd = smooth.basis(seq(1, 200, 1), simx_test, basis)$fd
simy_test_fd = smooth.basis(seq(1, 200, 1), simy_test, basis)$fd
expx_test_fd = smooth.basis(seq(1, 200, 1), expx_test, basis)$fd
expy_test_fd = smooth.basis(seq(1, 200, 1), expy_test, basis)$fd
betaPar = fdPar(basis, 0, 0)
bBspl2.3 <-bifd(array(1:20^2, dim=c(20,20)),  create.bspline.basis(c(0,200),20),  create.bspline.basis(c(0,200),20))
bifdbasis = bifdPar(bBspl2.3,0,0, 0,0)
betaPar = fdPar(basis, 0, 0)
bBspl2.3 <-bifd(array(1:20^2, dim=c(20,20)),  create.bspline.basis(c(0,200),20),  create.bspline.basis(c(0,200),20))
bifdbasis = bifdPar(bBspl2.3,0,0, 0,0)
betaList = list( betaPar, bifdbasis)
linmod(simx_test_fd, expx_test_fd, betaList)
daybasis = create.bspline.basis(c(0, 365), 20)
precfd <-smooth.basis(day.5,CanadianWeather$dailyAv[,,"Precipitation.mm"], daybasis)$fd
tempfd <- smooth.basis(day.5, CanadianWeather$dailyAv[,,"Temperature.C"], daybasis)$fd
beta1 = fd(array(0, 20), tempfd$basis)
region.contrasts <- model.matrix(~factor(CanadianWeather$region))
rgnContr3 <- region.contrasts
dim(rgnContr3) <- c(1, 35, 4)
dimnames(rgnContr3) <- list('', CanadianWeather$place, c('const', paste('region', c('Atlantic', 'Continental', 'Pacific'), sep='.')) )
const365 <- create.constant.basis(c(0, 365))
region.fd.Atlantic <- fd(matrix(rgnContr3[,,2], 1), const365)
# str(region.fd.Atlantic)
region.fd.Continental <- fd(matrix(rgnContr3[,,3], 1), const365)
region.fd.Pacific <- fd(matrix(rgnContr3[,,4], 1), const365)
region.fdlist <- list(const=rep(1, 35), region.Atlantic=region.fd.Atlantic, region.Continental=region.fd.Continental, region.Pacific=region.fd.Pacific)
#function on function regression
betabasis = create.bspline.basis(c(0,365),20)
beta0Par = fdPar(betabasis, 0, 0)
beta1sPar = fdPar(betabasis, 0, 0)
beta1tPar = fdPar(betabasis, 0, 0)
betaList = list(beta0Par, beta1sPar, beta1tPar)
betaList = list( beta1sPar, beta1tPar)
bBspl2.3 <-bifd(array(1:20^2, dim=c(20,20)),  create.bspline.basis(c(0,365),20),  create.bspline.basis(c(0,365),20))
bifdbasis = bifdPar(bBspl2.3,0,0, 0,0)
betaList = list( beta0Par, bifdbasis)
beta0 = fdPar(beta1)
betalist = list(beta0, beta0, beta0, beta0)
x_scalar = region.fdlist
x_function = precfd
yfdobj = tempfd
betalist1 = betalist
betaList2 = betaList
boost_control = 10
step_len = 0.1
lin = linmod(simx_test_fd, expx_test_fd, betaList)
library(fda)
library(splines)
basis = create.bspline.basis(c(0, 200), 20)
simx_test = as.matrix(read.csv("simx_train.csv", header = FALSE))
simy_test = as.matrix(read.csv("simy_train.csv", header = FALSE))
expx_test = as.matrix(read.csv("expx_train.csv", header = FALSE))
expy_test = as.matrix(read.csv("expy_train.csv", header = FALSE))
simx_test_fd = smooth.basis(seq(1, 200, 1), simx_test, basis)$fd
simy_test_fd = smooth.basis(seq(1, 200, 1), simy_test, basis)$fd
expx_test_fd = smooth.basis(seq(1, 200, 1), expx_test, basis)$fd
expy_test_fd = smooth.basis(seq(1, 200, 1), expy_test, basis)$fd
betaPar = fdPar(basis, 0, 0)
bBspl2.3 <-bifd(array(1:20^2, dim=c(20,20)),  create.bspline.basis(c(0,200),20),  create.bspline.basis(c(0,200),20))
bifdbasis = bifdPar(bBspl2.3,0,0, 0,0)
betaList = list( betaPar, bifdbasis)
lin = linmod(simx_test_fd, expx_test_fd, betaList)
predict_linmod =function(linmodres, newdata = NULL){
if(is.null(newdata)){
return (linmodres$yhatfdobj)
}
xbasis = newdata$basis
xnbasis = xbasis$nbasis
ranget = xbasis$rangeval
coefx = newdata$coefs
coefdx = dim(coefx)
ncurves = coefdx[2]
nfine = max(201, 10 * xnbasis  + 1)
tfine = seq(ranget[1], ranget[2], nfine)
alphafd = linmodres$beta0estfd
betasbasis = linmodres$beta1estbifd$sbasis
Hinprod = inprod(xbasis, betasbasis)
xcoef = coefx
Hmat = t(xcoef) %*% Hinprod
betacoef = t(linmodres$beta1estbifd$coef)
xbetacoef = betacoef %*% t(Hmat)
xbetafd = fd(xbetacoef, linmodres$beta1estbifd$tbasis)
yhatmat = eval.fd(tfine, alphafd) %*% matrix(1, 1, ncurves) +
eval.fd(tfine, xbetafd)
res = smooth.basis(tfine, yhatmat, xbasis)$fd
return(res)
}
xx = predict_linmod(lin, simx_test_fd)
linmodres = lin
newdata = simx_test_fd
if(is.null(newdata)){
return (linmodres$yhatfdobj)
}
xbasis = newdata$basis
xnbasis = xbasis$nbasis
ranget = xbasis$rangeval
coefx = newdata$coefs
coefdx = dim(coefx)
ncurves = coefdx[2]
nfine = max(201, 10 * xnbasis  + 1)
tfine = seq(ranget[1], ranget[2], nfine)
alphafd = linmodres$beta0estfd
betasbasis = linmodres$beta1estbifd$sbasis
Hinprod = inprod(xbasis, betasbasis)
xcoef = coefx
Hmat = t(xcoef) %*% Hinprod
betacoef = t(linmodres$beta1estbifd$coef)
xbetacoef = betacoef %*% t(Hmat)
xbetafd = fd(xbetacoef, linmodres$beta1estbifd$tbasis)
yhatmat = eval.fd(tfine, alphafd) %*% matrix(1, 1, ncurves) +
eval.fd(tfine, xbetafd)
res = smooth.basis(tfine, yhatmat, xbasis)$fd
tfine
ranget
nfine
seq(ranget[1], ranget[2], nfine)
seq(ranget[1], ranget[2], len = nfine)
predict_linmod =function(linmodres, newdata = NULL){
if(is.null(newdata)){
return (linmodres$yhatfdobj)
}
xbasis = newdata$basis
xnbasis = xbasis$nbasis
ranget = xbasis$rangeval
coefx = newdata$coefs
coefdx = dim(coefx)
ncurves = coefdx[2]
nfine = max(201, 10 * xnbasis  + 1)
tfine = seq(ranget[1], ranget[2], len = nfine)
alphafd = linmodres$beta0estfd
betasbasis = linmodres$beta1estbifd$sbasis
Hinprod = inprod(xbasis, betasbasis)
xcoef = coefx
Hmat = t(xcoef) %*% Hinprod
betacoef = t(linmodres$beta1estbifd$coef)
xbetacoef = betacoef %*% t(Hmat)
xbetafd = fd(xbetacoef, linmodres$beta1estbifd$tbasis)
yhatmat = eval.fd(tfine, alphafd) %*% matrix(1, 1, ncurves) +
eval.fd(tfine, xbetafd)
res = smooth.basis(tfine, yhatmat, xbasis)$fd
return(res)
}
xx = predict_linmod(lin, simx_test_fd)
xx = expx_test_fd
xx = predict_linmod(lin, simx_test_fd)
xx == expx_test_fd
xx
xx$coefs
xx$coefs = expx_test_fd$coefs
xx = predict_linmod(lin, simx_test_fd)
xx == predict_linmod(lin, simx_test_fd)
xx$coefs == expx_test_fd$coefs
xx$coefs
xx$coefs[,1]
expx_test_fd$coefs[,1]
lin$yhatfdobj$coefs[,1]
xx$coefs[,1]
newdata = simy_test_fd
xbasis = newdata$basis
xnbasis = xbasis$nbasis
ranget = xbasis$rangeval
coefx = newdata$coefs
coefdx = dim(coefx)
ncurves = coefdx[2]
nfine = max(201, 10 * xnbasis  + 1)
tfine = seq(ranget[1], ranget[2], len = nfine)
alphafd = linmodres$beta0estfd
betasbasis = linmodres$beta1estbifd$sbasis
alphafd
library(fda)
library(splines)
basis = create.bspline.basis(c(0, 200), 20)
simx_train = as.matrix(read.csv("simx_train.csv", header = FALSE))
simy_train = as.matrix(read.csv("simy_train.csv", header = FALSE))
expx_train = as.matrix(read.csv("expx_train.csv", header = FALSE))
expy_train = as.matrix(read.csv("expy_train.csv", header = FALSE))
simx_test = as.matrix(read.csv("simx_test.csv", header = FALSE))
simy_test = as.matrix(read.csv("simy_test.csv", header = FALSE))
expx_test = as.matrix(read.csv("expx_test.csv", header = FALSE))
expy_test = as.matrix(read.csv("expy_test.csv", header = FALSE))
simx_train_fd = smooth.basis(seq(1, 200, 1), simx_train, basis)$fd
simy_train_fd = smooth.basis(seq(1, 200, 1), simy_train, basis)$fd
expx_train_fd = smooth.basis(seq(1, 200, 1), expx_train, basis)$fd
expy_train_fd = smooth.basis(seq(1, 200, 1), expy_train, basis)$fd
simx_test_fd = smooth.basis(seq(1, 200, 1), simx_test, basis)$fd
simy_test_fd = smooth.basis(seq(1, 200, 1), simy_test, basis)$fd
expx_test_fd = smooth.basis(seq(1, 200, 1), expx_test, basis)$fd
expy_test_fd = smooth.basis(seq(1, 200, 1), expy_test, basis)$fd
betaPar = fdPar(basis, 0, 0)
bBspl2.3 <-bifd(array(1:20^2, dim=c(20,20)),  create.bspline.basis(c(0,200),20),  create.bspline.basis(c(0,200),20))
bifdbasis = bifdPar(bBspl2.3,0,0, 0,0)
betaList = list( betaPar, bifdbasis)
predict_linmod =function(linmodres, newdata = NULL){
if(is.null(newdata)){
return (linmodres$yhatfdobj)
}
xbasis = newdata$basis
xnbasis = xbasis$nbasis
ranget = xbasis$rangeval
coefx = newdata$coefs
coefdx = dim(coefx)
ncurves = coefdx[2]
nfine = max(201, 10 * xnbasis  + 1)
tfine = seq(ranget[1], ranget[2], len = nfine)
alphafd = linmodres$beta0estfd
betasbasis = linmodres$beta1estbifd$sbasis
Hinprod = inprod(xbasis, betasbasis)
xcoef = coefx
Hmat = t(xcoef) %*% Hinprod
betacoef = t(linmodres$beta1estbifd$coef)
xbetacoef = betacoef %*% t(Hmat)
xbetafd = fd(xbetacoef, linmodres$beta1estbifd$tbasis)
yhatmat = eval.fd(tfine, alphafd) %*% matrix(1, 1, ncurves) +
eval.fd(tfine, xbetafd)
res = smooth.basis(tfine, yhatmat, xbasis)$fd
return(res)
}
lin = linmod(simx_train_fd, expx_train_fd, betaList)
xx = predict_linmod(lin, simx_test_fd)
xx$coefs[,1]
expx_test_fd$coefs[,1]
simx_test_fd$coefs[,1]
xx$coefs[,2]
expx_test_fd$coefs[,2]
simx_test_fd$coefs[,2]
setwd("")
setwd("/Users/yuding/Library/CloudStorage/OneDrive-BinghamtonUniversity/FunctionalBoosting")
library(fda)
source("functions.R")
basis = create.bspline.basis(c(0, 200), 20)
simx_test = as.matrix(read.csv("simx_test.csv", header = F))
simy_test = as.matrix(read.csv("simy_test.csv", header = F))
expx_test = as.matrix(read.csv("expx_test.csv", header = F))
expy_test = as.matrix(read.csv("expy_test.csv", header = F))
simx_train = as.matrix(read.csv("simx_train.csv", header = F))
basis = create.bspline.basis(c(0, 200), 100)
simx_test = as.matrix(read.csv("simx_test.csv", header = F))
simy_test = as.matrix(read.csv("simy_test.csv", header = F))
expx_test = as.matrix(read.csv("expx_test.csv", header = F))
expy_test = as.matrix(read.csv("expy_test.csv", header = F))
simx_train = as.matrix(read.csv("simx_train.csv", header = F))
simy_train = as.matrix(read.csv("simy_train.csv", header = F))
expx_train = as.matrix(read.csv("expx_train.csv", header = F))
expy_train = as.matrix(read.csv("expy_train.csv", header = F))
simx_test_fd = smooth.basis(seq(1, 200, 1), simx_test, basis)$fd
simy_test_fd = smooth.basis(seq(1, 200, 1), simy_test, basis)$fd
expx_test_fd = smooth.basis(seq(1, 200, 1), expx_test, basis)$fd
expy_test_fd = smooth.basis(seq(1, 200, 1), expy_test, basis)$fd
simx_train_fd = smooth.basis(seq(1, 200, 1), simx_train, basis)$fd
simy_train_fd = smooth.basis(seq(1, 200, 1), simy_train, basis)$fd
expx_train_fd = smooth.basis(seq(1, 200, 1), expx_train, basis)$fd
expy_train_fd = smooth.basis(seq(1, 200, 1), expy_train, basis)$fd
source("functions.R")
basis = create.bspline.basis(c(0, 200), 50)
simx_test = as.matrix(read.csv("simx_test.csv", header = F))
simy_test = as.matrix(read.csv("simy_test.csv", header = F))
expx_test = as.matrix(read.csv("expx_test.csv", header = F))
expy_test = as.matrix(read.csv("expy_test.csv", header = F))
simx_train = as.matrix(read.csv("simx_train.csv", header = F))
simy_train = as.matrix(read.csv("simy_train.csv", header = F))
expx_train = as.matrix(read.csv("expx_train.csv", header = F))
expy_train = as.matrix(read.csv("expy_train.csv", header = F))
simx_test_fd = smooth.basis(seq(1, 200, 1), simx_test, basis)$fd
simy_test_fd = smooth.basis(seq(1, 200, 1), simy_test, basis)$fd
expx_test_fd = smooth.basis(seq(1, 200, 1), expx_test, basis)$fd
expy_test_fd = smooth.basis(seq(1, 200, 1), expy_test, basis)$fd
simx_train_fd = smooth.basis(seq(1, 200, 1), simx_train, basis)$fd
simy_train_fd = smooth.basis(seq(1, 200, 1), simy_train, basis)$fd
expx_train_fd = smooth.basis(seq(1, 200, 1), expx_train, basis)$fd
expy_train_fd = smooth.basis(seq(1, 200, 1), expy_train, basis)$fd
betaPar = fdPar(basis, 0, 0)
bbspl2 = bifd(array(1 : 50 ^ 2, dim = c(50, 50)), create.bspline.basis(c(0, 200), 50), create.bspline.basis(c(0, 200), 50))
bifdbasis = bifdPar(bbspl2, 0, 0, 0, 0)
betaList = list(betaPar, bifdbasis)
res = gradboost(simx_train_fd, simy_train_fd, expx_train_fd, betaList, 100, 0.1)
y_pred_expx_coef = pred_gradboost2(res, simx_test_fd, simy_test_fd, betaList, 0.1)$coefs
write.csv(y_pred_expx_coef, file = "y_pred_expx_coef.csv")
